openapi: 3.0.3
info:
  title: Dogtor
  version: 1.0.0

tags:
    - name: Auth
    - name: User
    - name: Pet
    - name: Card Info
    
servers:
  - url: https://api.dogtor.store
    description: Production server
    
paths:

#### AUTH ####

  /auth:
    post:
      summary: Get Token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: "Status Ok"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404NotFound'

#### USER ####
                
  /user/register:
    post:
      summary: Register new User
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '201':
          description: "No Content"
          
#### PET ####

  /pet:
    get:
      summary: Get all user pets
      tags:
        - Pet
      responses:
        '201':
          description: "No Content"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
    post:
      summary: Register new Pet
      tags:
        - Pet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '201':
          description: "No Content"
          
  /pet/{pet_id}:
    get:
      summary: Get some Pet
      tags:
        - Pet
      parameters:
        - in: path
          name: pet_id
          schema:
            type: string
          required: true
          description: UUID of the target pet
      responses:
        '200':
          description: "Pet"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"

    put:
      summary: Update some Pet
      tags:
        - Pet
      parameters:
        - in: path
          name: pet_id
          schema:
            type: string
          required: true
          description: UUID of the target pet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: "No Content"
          
    delete:
      summary: Delete some Pet
      tags:
        - Pet
      parameters:
        - in: path
          name: pet_id
          schema:
            type: string
          required: true
          description: UUID of the target pet
      responses:
        '201':
          description: "No Content"

#### CARD INFO ####

  /card:
    get:
      summary: Get all user cards
      tags:
        - Card Info
      responses:
        '201':
          description: "No Content"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardInfo"

    post:
      summary: Register new Card
      tags:
        - Card Info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewCardInfo'
      responses:
        '201':
          description: "No Content"
          
  /card/{card_info_id}:
    get:
      summary: Get some Card
      tags:
        - Card Info
      parameters:
        - in: path
          name: card_info_id
          schema:
            type: string
          required: true
          description: UUID of the target card
      responses:
        '200':
          description: "Card"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardInfo"

    put:
      summary: Update some Card
      tags:
        - Card Info
      parameters:
        - in: path
          name: card_info_id
          schema:
            type: string
          required: true
          description: UUID of the target card
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardInfo'
      responses:
        '201':
          description: "No Content"
          
    delete:
      summary: Delete some Card
      tags:
        - Card Info
      parameters:
        - in: path
          name: card_info_id
          schema:
            type: string
          required: true
          description: UUID of the target card
      responses:
        '201':
          description: "No Content"

security:
  - bearerAuth: [] 

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Login:
      type: object
      properties:
        email: 
          type: string
          example: "email@example.com"
        password:
          type: string
          example: "Password#01"
          
    Register:
      type: object
      properties:
        fullName:
          type: string
          example: "Name Example"
        birthDate:
          type: string
          example: "2023-01-01"
        cpf:
          type: string
          example: "01234567890"
        address:
          type: object
          properties:
            zipCode:
              type: number
              example: 01001000
            country:
              type: string
              example: "Brazil"
            city:
              type: string
              example: "Sao Paulo"
            streetName:
              type: string
              example: "Praça da Sé"
            number:
              type: number
              example: 50
            additionalInfo:
              type: string
              example: "Marco zero de Sao Paulo"
            
        email: 
          type: string
          example: "email@example.com"
        phoneNumber:
          type: string
          example: "(11) 91234-5678"
        password:
          type: string
          example: "Password#01"
          
    TokenResponse:      
      type: object
      properties:
        token:
          type: string
        expires_at:
          type: string
          example: "2023-01-01 00:00:00"

  #-----------------entities-------------------#
    User:
      type: object
      properties:
        uuid:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        fullName:
          type: string
          example: "Name Example"
        hashCpf:
          type: string
          example: "7ed10e4a589c87f9e6a85c22e4b0c38ecf5f5059"
        email:
          type: string
          example: "email@example.com"
        birthDate:
          type: string
          example: "YYYY-MM-DDTHH:mm:ss.sssZ"
        address:
          type: object
          properties:
            schema:
              $ref: "#/components/schemas/404NotFound"
        cardInfo:
          type: object
          properties:
            schema:
              $ref: "#/components/schemas/404NotFound"
      
    Address:
      type: object
      properties:
        zipCode:
          type: number
          example: "01001-000"
        country:
          type: string
          example: "Brazil"
        city:
          type: string
          example: "Sao Paulo"
        streetName:
          type: string
          example: "Praça da Sé"
        number:
          type: number
          example: "50"
        additionalInfo:
          type: string
          example: "Marco Zero de Sao Paulo"

    NewCardInfo:
      type: object
      properties:
        cpf:
          type: string
          example: "012.345.678-90"
        cardNumber:
          type: string
          example: "1234 5678 9012 3456"
        cardExpireDate:
          type: string
          example: "01/30"
        cardFlag:
          type: string
          example: "Mastercard"
      
    CardInfo:
      type: object
      properties:
        uuid:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        hashCpf:
          type: string
          example: "7ed10e4a589c87f9e6a85c22e4b0c38ecf5f5059"
        cardNumber:
          type: string
          example: "1234 5678 9012 3456"
        cardExpireDate:
          type: string
          example: "01/30"
        cardFlag:
          type: string
          example: "Mastercard"
    
    BankInfo:
      type: object
      properties:
        uuid:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        document:
          type: string
          example: "01234567890"
        bankNumber:
          type: string
          example: "0260"
        agency:
          type: string
          example: "012345"
        agencyDigit:
          type: string
          example: "6"
        accountNumber:
          type: string
          example: "012345"
        accountNumberDigit:
          type: string
          example: "6"

    Payment:
      type: object
      properties:
        uuid:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        paymentMethod:
          type: string
          example: ""
        installments: 
          type: number
          example: 1
        installmentDueDate:
          type: number
          example: 1
        billTotal:
          type: number
          example: 100.00
        doctorUUID:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        petUUID:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        userUUID:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"

    NewPet:
      type: object
      properties:
        fullName:
          type: string
          example: "Name Example"
        birthDate:
          type: string
          example: "YYYY-MM-DDTHH:mm:ss.sssZ"
        size:
          type: number
          example: 10.0
        weight:
          type: number
          example: 10.0
        description:
          type: string
          example: "Lorem Ipsum"
        specieID:
          type: number
          example: 10
        raceID:
          type: number
          example: 10
        
    Pet:
      type: object
      properties:
        uuid:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        userUUID:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        fullName:
          type: string
          example: "Name Example"
        birthDate:
          type: string
          example: "YYYY-MM-DDTHH:mm:ss.sssZ"
        size:
          type: number
          example: 10.0
        weight:
          type: number
          example: 10.0
        description:
          type: string
          example: "Lorem Ipsum"
        specieID:
          type: number
          example: 10
        raceID:
          type: number
          example: 10

    Species:
      type: object
      properties:
        specie:
          type: string
          example: "Lorem Ipsum"
        
    Races:
      type: object
      properties:
        race:
          type: string
          example: "Lorem Ipsum"
        specieID:
          type: number
          example: 10
        
    Company:
      type: object
      properties:
        uuid:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        document:
          type: string
          example: "00.000.000/0001-00"
        corporateName:
          type: string
          example: "Corporate Name ltda"
        socialName:
          type: string
          example: "Corporate Social Name"
        contactEmail:
          type: string
          example: "contact@email.com"
        contactNumber:
          type: string
          example: "(00) 0000-0000"
        
    CompanyBranch:
      type: object
      properties:
        uuid:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        companyUUID:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        contactEmail:
          type: string
          example: "contact_branch@email.com"
        contactNumber:
          type: string
          example: "(00) 90000-0000"
        bankInfoUUID:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        
    Doctor:
      type: object
      properties:
        uuid:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        fullName:
          type: string
          example: "Name Example"
        birthDate:
          type: string
          example: "YYYY-MM-DDTHH:mm:ss.sssZ"
        contactEmail:
          type: string
          example: "contact@email.com"
        contactNumber:
          type: string
          example: "(00) 90000-0000"
        expertise:
          type: string
          example: "Expertise Example"
        description:
          type: string
          example: "Lorem Ipsum"
        companyBranchUUID:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
          
    Services:
      type: object
      properties:
        uuid:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        name:
          type: string
          example: "Lorem Ipsum"
        
    DoctorServices:
      type: object
      properties:
        doctorUUID:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        serviceID:
          type: number
          example: 10
        available:
          type: boolean
          example: false
  
  # Event is an abreviation of appointment and availabillity structs
    Event:
      type: object
      properties:
        times:
          type: array
          items:
            type: object
            properties:
              doctorServiceID:
                type: number
                example: 10
              startTime:
                type: string
                example: "YYYY-MM-DDTHH:mm:ss.sssZ"
              endTime:
                type: string
                example: "YYYY-MM-DDTHH:mm:ss.sssZ"
        doctorUUID:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        petUUID:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"

    Notification:
      type: object
      properties:
        uuid:
          type: string
          example: "8857fc83-9b59-11ed-be3f-0242ac110002"
        companyUUID:
          type: string
          example: ""
        info:
          type: string
          example: "Lorem Ipsum"
        expiresAt:
          type: string
          example: "YYYY-MM-DDTHH:mm:ss.sssZ"
        delivered:
          type: boolean
          example: false
        
  #-----------------responses-------------------#
    404NotFound:
      type: object
      properties:
        error:
          type: string
          